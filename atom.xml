<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[WilburDing's Blog]]></title>
  <link href="http://wilburding.github.com/atom.xml" rel="self"/>
  <link href="http://wilburding.github.com/"/>
  <updated>2012-11-23T22:57:20+08:00</updated>
  <id>http://wilburding.github.com/</id>
  <author>
    <name><![CDATA[Wilbur Ding]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python实现简单的Monad]]></title>
    <link href="http://wilburding.github.com/blog/2012/11/23/simple-monad-in-python/"/>
    <updated>2012-11-23T22:06:00+08:00</updated>
    <id>http://wilburding.github.com/blog/2012/11/23/simple-monad-in-python</id>
    <content type="html"><![CDATA[<p>今天看了一篇讲Ruby实现的Monad的文章（<a href="http://moonbase.rydia.net/mental/writings/programming/monads-in-ruby/00introduction">这里</a>），所以一时兴起就也想用Python写一个。So，心动不如行动。。</p>

<p>在Haskell里，Monad就是用来把带有context的值应用到接受普通值并返回带context的值的函数的，用<a href="http://learnyouahaskell.com/" title="Learn You a Haskell for Great Good!">Learn You a Haskell</a>话说就是</p>

<blockquote><p>If we have a fancy value and a function that takes a normal value but returns a fancy value, how do we feed that fancy value into the function?</p></blockquote>


<p>简单说，我们的目标就是Monad的两个主要的函数：</p>

<ol>
<li>return，把值放到最小化的context中</li>
<li>>>=（bind），把作为左操作数的Monadic值应用到作为右操作数的函数上，这个函数接受一个普通的值并返回Monadic值</li>
</ol>


<p>首先，我们需要一个作为Monad的数据类型，这里简单用了一个继承自list的类MonadList，当然也可以自己造一个Maybe什么的。这样，return操作就是把值放到list里，不过Python已经把这个名字给占用了，所以只好取另一个名字wrap; 而bind就是把list里的元素逐一应用到给定的函数上（aka. map!），不过>>=在Python里是赋值语句，只能用个类似的>>了（不同于Haskell的Monad的>>）。</p>

<p>代码如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MonadList</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrap</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">MonadList</span><span class="p">([</span><span class="n">value</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">bind</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">acc</span><span class="p">,</span> <span class="n">element</span><span class="p">:</span> <span class="n">acc</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">element</span><span class="p">)</span> <span class="ow">or</span> <span class="n">acc</span><span class="p">,</span>
</span><span class='line'>                      <span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="bp">self</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">MonadList</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__rshift__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">bind</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&#39;MonadList: &#39;</span> <span class="o">+</span> <span class="nb">super</span><span class="p">(</span><span class="n">MonadList</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__str__</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">MonadList</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span> <span class="o">&gt;&gt;</span> \
</span><span class='line'>        <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">MonadList</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="n">x</span> <span class="o">**</span> <span class="mi">2</span><span class="p">))</span> \
</span><span class='line'>        <span class="o">&gt;&gt;</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">MonadList</span><span class="o">.</span><span class="n">wrap</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>代码的作用很简单，就是把数组的元素先平方再加1 。。</p>

<p>另外，在写这篇文章的时候还发现了另一个<a href="http://www.valuedlessons.com/2008/01/monads-in-python-with-nice-syntax.html" title="Monads in Python (with nice syntax!)">blog</a>，比较详细的讲了一个要产品化的代码里使用的Python的Monad，嗯哼。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python的is和==操作符用法]]></title>
    <link href="http://wilburding.github.com/blog/2012/10/10/on-pythons-is-and-equals-equals-operator/"/>
    <updated>2012-10-10T23:44:00+08:00</updated>
    <id>http://wilburding.github.com/blog/2012/10/10/on-pythons-is-and-equals-equals-operator</id>
    <content type="html"><![CDATA[<p>我只是想说下今天代码检查中遇到的一个问题，不做详细的说明。代码里有这种用法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">if</span> <span class="n">someVar</span> <span class="ow">is</span> <span class="p">[]:</span>
</span><span class='line'>    <span class="n">blah</span>
</span><span class='line'><span class="err">…</span>
</span><span class='line'><span class="k">if</span> <span class="n">anotherVar</span> <span class="ow">is</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="n">blah</span>
</span></code></pre></td></tr></table></div></figure>


<p>很明显这么用是错的，判断空链表应该用隐式转换，值是否为1用==。当然为了说明清楚问题，稍微研究了一下。控制台里进行了这样的测试：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">n</span> <span class="ow">is</span> <span class="mi">1</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1000</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="ow">is</span> <span class="mi">1000</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[]</span> <span class="ow">is</span> <span class="p">[]</span>
</span><span class='line'><span class="bp">False</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="p">[]</span> <span class="o">==</span> <span class="p">[]</span>
</span><span class='line'><span class="bp">True</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>n is 1</code>返回True是由于Python对于小整数的优化（小整数都是预先创建好的，需要时直接使用），<code>a is 1000</code>返回False是因为一般的整数都是需要时直接创建的对象并且就算之前有相同的值的对象也不会复用。不过如果写<code>1000 is 1000</code>是会返回True的，因为这俩字面常量实际上引用了一个对象，这应该是编译器的优化吧。<code>[] is []</code>返回False就显而易见了，因为每个list都是全新的对象，不会复用已有的对象。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手工安装OSX上的支付宝插件]]></title>
    <link href="http://wilburding.github.com/blog/2012/10/06/manually-install-alipay-plugin/"/>
    <updated>2012-10-06T22:31:00+08:00</updated>
    <id>http://wilburding.github.com/blog/2012/10/06/manually-install-alipay-plugin</id>
    <content type="html"><![CDATA[<p>支付宝在OSX里的插件一直安装不能，因为一个&#8221;empty alias&#8221;的问题。本来想等着支付宝能哪天更新下解决的，结果等到现在也不行，无奈只好自己手动装了。
虽然没仔细研究过OSX上的软件安装流程，但大概是直接把.application那个文件夹拖到目标目录就可以了。所以需要先知道那个&#8221;empty alias&#8221;原来要指到哪里的。google了一番，找到了google earth还有一些其他插件的说明文档，说放到 /Library/Internet Plug-ins 里。一开始脑袋短路了，在~/下面找那个目录，结果没找到自己新建了个，加上搜索的时候出现了好几个目录名（Internet Plugins/Internet Plugin/Internet
Plug-ins什么的），试了半天无果。最后终于找到了正确位置，发现已经有好几个插件了，然后把wkaliedit.dmg里的aliedit.plugin直接拽过去，当然要提下权限。
这么拽过去的插件还是不能用的，因为里面的文件的权限只对root开了rwx，而且还有apple的扩展属性xattr什么的需要清掉。大概的命令是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> /Library/Internet<span class="se">\ </span>Plug-Ins
</span><span class='line'>sudo chmod a+rx aliedit.plugin
</span><span class='line'>sudo xattr -c -r aliedit.plugin
</span><span class='line'><span class="nb">cd </span>aliedit.plugin
</span><span class='line'>find . -type d| sudo xargs chmod a+rw
</span><span class='line'>find . -type f| sudo xargs chmod a+r
</span><span class='line'>sudo chmod a+x Contents/MacOS/aliedit
</span></code></pre></td></tr></table></div></figure>


<p>这么搞之后，重启下浏览器，登陆alipay.com的时候的密码框应该就能用了。不过后来发现里面的支付密码框还是不能用的，暂时没弄清楚还，有了解的麻烦告知下，thx。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://wilburding.github.com/blog/2012/10/06/hello-world/"/>
    <updated>2012-10-06T16:07:00+08:00</updated>
    <id>http://wilburding.github.com/blog/2012/10/06/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!</p>
]]></content>
  </entry>
  
</feed>
